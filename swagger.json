{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "Store API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:4000",
  "tags": [
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "schemes": ["http"],
  "paths": {
    "/product": {
      "post": {
        "tags": ["product"],
        "summary": "Add a new product to the store",
        "description": "",
        "operationId": "addProduct",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "price": {
                  "type": "number"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "new product created"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "tags": ["product"],
        "summary": "Get all products",
        "description": "",
        "operationId": "getProducts",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/product/{id}": {
      "get": {
        "tags": ["product"],
        "summary": "Finds product by Id",
        "description": "",
        "operationId": "findProductById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "productId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },

    "/user/{userId}/order": {
      "get": {
        "tags": ["orders"],
        "summary": "Returns orders of user",
        "description": " ",
        "operationId": "getUserOrders",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": ["orders"],
        "summary": "create Order to user",
        "description": "",
        "operationId": "createUserOrder",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid Order"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/order/{id}/products": {
      "post": {
        "tags": ["orders"],
        "summary": "Add product to order",
        "description": "",
        "operationId": "addProductToOrder",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of order",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "productId": {
                  "type": "integer"
                },
                "quantity": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user_name": {
                  "type": "string"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": ["user"],
        "summary": "Get All users",
        "description": "",
        "operationId": "get All users",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid get"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user_name": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "401": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by id",
        "description": "",
        "operationId": "getUserById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched ",
            "required": true,
            "type": "number"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid userId supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "scheme": "bearer",
      "bearerFormat": "JWT"
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "productId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": ["active", "completed"]
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "user_name": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Product": {
      "type": "object",
      "required": ["name", "price"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "book"
        },
        "price": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "Pet"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
